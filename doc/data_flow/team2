KLASTERYZACJA
=============

Dane wejściowe (co, skąd, w jakim formacie)
--------------

Na wejściu przyjmujemy SIFTy bądź inne parametry wyznaczone dla obrazków
ze zbioru uczącego i walidacyjnego. Proponuję umieszczać je w:
exp/features/<data_set>/. Nazwa pliku to rodzaj użytej parametryzacji, gdzie:

* sift - sifty policzone jak w scripts/glob_example.py
* sift_pca_N - sifty zredukowane do N wymiarów za pomocą pca (w takim przypadku
zakładamy też istnienie pliku sift_pca_N_mat.json, w którym jest zapisana
macierz redukcji)
* TBA

Przykład:
user@computer:~/ZPS2018$ ls exp/features/cats_dogs/
sift_pca_32.json sift_pca_32_mat.json sift.json

Dane wyjściowe (co, dokąd, w jakim formacie)
--------------

Wynikiem klasteryzacji jest opis klas, który umożliwia sklasyfikowanie
nowych punktów. Ponieważ nie wszystkie algorytmy klasteryzacji znamy już teraz,
proponuję uzywać plików, gdzie w każdej linijce będzie podana plik z zapisanym
klasyfikatorem i - oddzielone spacjami - inne parametry.

Pierwszym parametrem powinna być ścieżka pliku, na podstawie którego został
skonstruowany klasyfikator (np. exp/features/cats_dogs/sift_pca_32.json),
drugim nazwa użytej metody (np. kmeans), a kolejne w zależności od metody.
Ustalamy:

* k-means - parametry to: kmeans <liczba_centrów>
* GMM - parametry to: gmm <liczba_rozkładów>

W dalszym ciągu proponuję stosować nazwy oddające to, co znajduje się w pliku,
jednak nie bazować na nich w kodzie.

Przykład:

user@computer:~/ZPS2018$ cat exp/cluster/cats_dogs/clusters.txt
sifts_kmeans_15.json exp/features/cats_dogs/sift.json kmeans 15
sifts_pca_32_gmm_16.json exp/features/cats_dogs/sift_pca_32.json gmm 16

Dane zapisane będą w formacie, jaki wypluwa numpy, za pomocą zrzutu do jsona 
(patrz scripts/glob_example.py).
